{"ast":null,"code":"\"use strict\"; // import { Configs } from './../_configs/configs';\n// import { Injectable } from '@angular/core';\n// import { User } from '../_shared/models/user';\n// @Injectable({\n//     providedIn: 'root'\n// })\n// export class AuthenticateService {\n//     constructor() { }\n//     public isAuthenticated(): boolean {\n//         const token = localStorage.getItem(Configs.tokenKey);\n//         if (token && token.length > 0) {\n//             let payLoad = atob(token.split('.')[1]);\n//             return JSON.parse(payLoad).exp > Date.now() / 1000;\n//         } else {\n//             return false;\n//         }\n//     }\n//     public getType(): String | undefined {\n//         const token = localStorage.getItem(Configs.tokenKey);\n//         if (token && token.length > 0) {\n//             let payLoad = atob(token.split('.')[1]);\n//             return JSON.parse(atob(token.split('.')[1])).adminType;\n//         } else {\n//             return undefined;\n//         }\n//     }\n//     public checkToken(): boolean {\n//         const userData = localStorage.getItem(Configs.tokenKey);\n//         if (userData && userData.length > 0) {\n//             return true;\n//         } else {\n//             return false;\n//         }\n//     }\n//     public getInfo(): any {\n//         const token = localStorage.getItem(Configs.tokenKey);\n//         if (token) {\n//             return JSON.parse(atob(token.split('.')[1]));\n//         } else {\n//             return '';\n//         }\n//     }\n//     public async login(token: string) {\n//         await window.localStorage.removeItem(Configs.tokenKey);\n//         await window.localStorage.setItem(Configs.tokenKey, token);\n//         return true;\n//     }\n//     public async logout() {\n//         await localStorage.removeItem(Configs.tokenKey);\n//         await localStorage.clear();\n//         return true;\n//     }\n// }","map":{"version":3,"sources":["C:\\Users\\GeorgesKfoury\\Documents\\GitHub\\ISSProject-frontend\\src\\app\\_guards\\authenticate.service.ts"],"names":[],"mappings":"cAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import { Configs } from './../_configs/configs';\r\n// import { Injectable } from '@angular/core';\r\n// import { User } from '../_shared/models/user';\r\n\r\n// @Injectable({\r\n//     providedIn: 'root'\r\n// })\r\n// export class AuthenticateService {\r\n\r\n//     constructor() { }\r\n\r\n//     public isAuthenticated(): boolean {\r\n//         const token = localStorage.getItem(Configs.tokenKey);\r\n//         if (token && token.length > 0) {\r\n//             let payLoad = atob(token.split('.')[1]);\r\n//             return JSON.parse(payLoad).exp > Date.now() / 1000;\r\n//         } else {\r\n//             return false;\r\n//         }\r\n//     }\r\n\r\n//     public getType(): String | undefined {\r\n//         const token = localStorage.getItem(Configs.tokenKey);\r\n//         if (token && token.length > 0) {\r\n//             let payLoad = atob(token.split('.')[1]);\r\n//             return JSON.parse(atob(token.split('.')[1])).adminType;\r\n//         } else {\r\n//             return undefined;\r\n//         }\r\n//     }\r\n\r\n//     public checkToken(): boolean {\r\n//         const userData = localStorage.getItem(Configs.tokenKey);\r\n//         if (userData && userData.length > 0) {\r\n//             return true;\r\n//         } else {\r\n//             return false;\r\n//         }\r\n//     }\r\n\r\n\r\n//     public getInfo(): any {\r\n//         const token = localStorage.getItem(Configs.tokenKey);\r\n//         if (token) {\r\n//             return JSON.parse(atob(token.split('.')[1]));\r\n//         } else {\r\n//             return '';\r\n//         }\r\n//     }\r\n\r\n//     public async login(token: string) {\r\n//         await window.localStorage.removeItem(Configs.tokenKey);\r\n//         await window.localStorage.setItem(Configs.tokenKey, token);\r\n//         return true;\r\n//     }\r\n\r\n//     public async logout() {\r\n//         await localStorage.removeItem(Configs.tokenKey);\r\n//         await localStorage.clear();\r\n//         return true;\r\n//     }\r\n// }"],"sourceRoot":""},"metadata":{},"sourceType":"script"}